version: '3'
services:
  frontend:
    container_name: frontend_tarefas
    build: 
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - 3000:3000
    working_dir: /app-frontend
    volumes:
      - ./frontend/src:/app-frontend/src
    tty: true # executa o container continuamente
    # Os `healthcheck` devem garantir que a aplicação está
    # operacional antes de liberar o container
    healthcheck:
      test: ["CMD", "lsof", "-t", "-i:3000"]
      timeout: 10s
      retries: 5
    depends_on:
      backend:
        condition: service_healthy   

  backend:
    # Faz o docker construir (build) de uma imagem personalizada
    # baseada no arquivo Dockerfile
    build: 
      context: ./backend
      dockerfile: Dockerfile
    # Nome do container para facilitar execução
    container_name: tarefas_api
    # Diretório padrão de execução
    working_dir: /app-backend
    # Lista de volumes (diretórios) mapeados de fora para dentro do container
    volumes:
      # Monta o diretório atual, com todos os dados da aplicação, dentro do diretório /app
      - ./backend/src:/app-backend/src
    ports:
      # Expõe a porta padrão da aplicação: altere aqui caso use outra porta
      # na notação porta_de_fora:porta_de_dentro
      - 3001:3001
    environment:
      # variáveis de ambiente
      MYSQL_USER: root
      MYSQL_PASSWORD: root
      MYSQL_HOST: database
      MYSQL_PORT: 3306
    # Informa ao docker, para que o container node seja iniciado após o container database
    depends_on:
      database:
        condition: service_healthy   

  database:
    image: mysql:8.0.29
    container_name: db
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: tarefasdb
    healthcheck:
      # Deve aguardar o banco ficar operacional
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 10s
      retries: 5
    ports:
      - "33060:3306"
    volumes:
        - ./backend/tarefas_script.sql:/docker-entrypoint-initdb.d/tarefas_script.sql
